// ../Router/Router+Request.swift
//
//  RequestGenerator.swift
//  SwiftKit
//
//  Created by Filip Dolnik on 08.12.16.
//  Copyright Â© 2016 Brightify. All rights reserved.
//

print("// This file is generated by RequestGenerator script.")
print("")
print("import DataMapper")
for output in outputTypes {
    let responseType = output.isValue ? "OUT?" : output
    
    print("")
    print("// Extension for output type \(output).")
    print("extension Router {")
    for input in inputTypes {
        let inputSigniture = input.isVoid ? "" : ", input: \(input)"
        let inputProvider: String
        let genericSigniture: String
        
        if input.isSupportedType {
            inputProvider = "input"
        } else if input.isVoid {
            inputProvider = ".null"
        } else {
            inputProvider = "self.objectMapper.serialize(input)"
        }
        
        if input.isKnownType && output.isKnownType {
            genericSigniture = ""
        } else if input.isKnownType {
            genericSigniture = "<OUT: Deserializable>"
        } else if output.isKnownType {
            genericSigniture = "<IN: Serializable>"
        } else {
            genericSigniture = "<IN: Serializable, OUT: Deserializable>"
        }
        
        print("")
        print("    @discardableResult")
        print("    public func request\(genericSigniture)(_ endpoint: Endpoint<\(input), \(output)>\(inputSigniture), callback: @escaping (Response<\(responseType)>) -> ()) -> Cancellable {")
        print("        return run(endpoint: endpoint, inputProvider: { \(inputProvider) }, callback: callback)")
        print("    }")
    }
    
    let outputGenericSigniture = output.isKnownType ? "" : ", OUT: Deserializable"
    var responseMapping: String
    if output.isVoid {
        responseMapping = "_ in Void()"
    } else if output.isSupportedType {
        responseMapping = "$0"
    } else  {
        responseMapping = "self.objectMapper.deserialize($0)"
    }
    if output.isArray {
        responseMapping += " ?? []"
    } else if output.isDictionary {
        responseMapping += " ?? [:]"
    }
    
    print("")
    print("    private func run<IN\(outputGenericSigniture)>(endpoint: Endpoint<IN, \(output)>, inputProvider: @escaping () -> (SupportedType), callback: @escaping (Response<\(responseType)>) -> ()) -> Cancellable {")
    print("        let cancellable = Cancellable()")
    print("        callQueue.async {")
    print("            cancellable.add(cancellable: self.run(endpoint: endpoint, input: inputProvider()) { (response: Response<SupportedType>) in")
    print("                let mappedResponse: Response<\(responseType)> = response.map { \(responseMapping) }")
    print("                self.callbackQueue.async { callback(mappedResponse) }")
    print("            })")
    print("        }")
    print("        return cancellable")
    print("    }")
    print("}")
}
