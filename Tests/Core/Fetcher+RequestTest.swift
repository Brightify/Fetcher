// This file is generated by RequestGenerator script.

import Quick
import Nimble
import Fetcher
import DataMapper

class Fetcher_RequestTest: QuickSpec {

    override func spec() {
        describe("Fetcher") {
            var called = false
            beforeEach {
                called = false
            }

            describe("request<SupportedType, SupportedType>") {
                it("works") {
                    self.fetcher(response: "\"a\"").request(POST<SupportedType, SupportedType>("xyz"), input: .string("a")) { response in
                        self.assertInput(request: response.request, expected: "\"a\"")
                        expect(response.result.value) == .string("a")
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Void, SupportedType>") {
                it("works") {
                    self.fetcher(response: "\"a\"").request(POST<Void, SupportedType>("xyz")) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == .string("a")
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Data, SupportedType>") {
                it("works") {
                    self.fetcher(response: "\"a\"").request(POST<Data, SupportedType>("xyz"), input: "a".data(using: .utf8)!) { response in
                        self.assertInput(request: response.request, expected: "a")
                        expect(response.result.value) == .string("a")
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN, SupportedType>") {
                it("works") {
                    self.fetcher(response: "\"a\"").request(POST<Int, SupportedType>("xyz"), input: 1) { response in
                        self.assertInput(request: response.request, expected: "1")
                        expect(response.result.value) == .string("a")
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN?, SupportedType>") {
                it("works") {
                    self.fetcher(response: "\"a\"").request(POST<Int?, SupportedType>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == .string("a")
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN], SupportedType>") {
                it("works") {
                    self.fetcher(response: "\"a\"").request(POST<[Int], SupportedType>("xyz"), input: [1, 2]) { response in
                        self.assertInput(request: response.request, expected: "[1,2]")
                        expect(response.result.value) == .string("a")
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN]?, SupportedType>") {
                it("works") {
                    self.fetcher(response: "\"a\"").request(POST<[Int]?, SupportedType>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == .string("a")
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?], SupportedType>") {
                it("works") {
                    self.fetcher(response: "\"a\"").request(POST<[Int?], SupportedType>("xyz"), input: [1, nil]) { response in
                        self.assertInput(request: response.request, expected: "[1,null]")
                        expect(response.result.value) == .string("a")
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?]?, SupportedType>") {
                it("works") {
                    self.fetcher(response: "\"a\"").request(POST<[Int?]?, SupportedType>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == .string("a")
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN], SupportedType>") {
                it("works") {
                    self.fetcher(response: "\"a\"").request(POST<[String: Int], SupportedType>("xyz"), input: ["a": 1]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":1}")
                        expect(response.result.value) == .string("a")
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN]?, SupportedType>") {
                it("works") {
                    self.fetcher(response: "\"a\"").request(POST<[String: Int]?, SupportedType>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == .string("a")
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?], SupportedType>") {
                it("works") {
                    self.fetcher(response: "\"a\"").request(POST<[String: Int?], SupportedType>("xyz"), input: ["a": nil]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":null}")
                        expect(response.result.value) == .string("a")
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?]?, SupportedType>") {
                it("works") {
                    self.fetcher(response: "\"a\"").request(POST<[String: Int?]?, SupportedType>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == .string("a")
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<SupportedType, Void>") {
                it("works") {
                    self.fetcher(response: "").request(POST<SupportedType, Void>("xyz"), input: .string("a")) { response in
                        self.assertInput(request: response.request, expected: "\"a\"")
                        expect(response.result.value).toNot(beNil())
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Void, Void>") {
                it("works") {
                    self.fetcher(response: "").request(POST<Void, Void>("xyz")) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value).toNot(beNil())
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Data, Void>") {
                it("works") {
                    self.fetcher(response: "").request(POST<Data, Void>("xyz"), input: "a".data(using: .utf8)!) { response in
                        self.assertInput(request: response.request, expected: "a")
                        expect(response.result.value).toNot(beNil())
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN, Void>") {
                it("works") {
                    self.fetcher(response: "").request(POST<Int, Void>("xyz"), input: 1) { response in
                        self.assertInput(request: response.request, expected: "1")
                        expect(response.result.value).toNot(beNil())
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN?, Void>") {
                it("works") {
                    self.fetcher(response: "").request(POST<Int?, Void>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value).toNot(beNil())
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN], Void>") {
                it("works") {
                    self.fetcher(response: "").request(POST<[Int], Void>("xyz"), input: [1, 2]) { response in
                        self.assertInput(request: response.request, expected: "[1,2]")
                        expect(response.result.value).toNot(beNil())
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN]?, Void>") {
                it("works") {
                    self.fetcher(response: "").request(POST<[Int]?, Void>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value).toNot(beNil())
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?], Void>") {
                it("works") {
                    self.fetcher(response: "").request(POST<[Int?], Void>("xyz"), input: [1, nil]) { response in
                        self.assertInput(request: response.request, expected: "[1,null]")
                        expect(response.result.value).toNot(beNil())
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?]?, Void>") {
                it("works") {
                    self.fetcher(response: "").request(POST<[Int?]?, Void>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value).toNot(beNil())
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN], Void>") {
                it("works") {
                    self.fetcher(response: "").request(POST<[String: Int], Void>("xyz"), input: ["a": 1]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":1}")
                        expect(response.result.value).toNot(beNil())
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN]?, Void>") {
                it("works") {
                    self.fetcher(response: "").request(POST<[String: Int]?, Void>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value).toNot(beNil())
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?], Void>") {
                it("works") {
                    self.fetcher(response: "").request(POST<[String: Int?], Void>("xyz"), input: ["a": nil]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":null}")
                        expect(response.result.value).toNot(beNil())
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?]?, Void>") {
                it("works") {
                    self.fetcher(response: "").request(POST<[String: Int?]?, Void>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value).toNot(beNil())
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<SupportedType, Data>") {
                it("works") {
                    self.fetcher(response: "a").request(POST<SupportedType, Data>("xyz"), input: .string("a")) { response in
                        self.assertInput(request: response.request, expected: "\"a\"")
                        expect(response.result.value).toNot(beNil())
                        if let value = response.result.value {
                            expect(String(data: value, encoding: .utf8)) == "a"
                        }
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Void, Data>") {
                it("works") {
                    self.fetcher(response: "a").request(POST<Void, Data>("xyz")) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value).toNot(beNil())
                        if let value = response.result.value {
                            expect(String(data: value, encoding: .utf8)) == "a"
                        }
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Data, Data>") {
                it("works") {
                    self.fetcher(response: "a").request(POST<Data, Data>("xyz"), input: "a".data(using: .utf8)!) { response in
                        self.assertInput(request: response.request, expected: "a")
                        expect(response.result.value).toNot(beNil())
                        if let value = response.result.value {
                            expect(String(data: value, encoding: .utf8)) == "a"
                        }
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN, Data>") {
                it("works") {
                    self.fetcher(response: "a").request(POST<Int, Data>("xyz"), input: 1) { response in
                        self.assertInput(request: response.request, expected: "1")
                        expect(response.result.value).toNot(beNil())
                        if let value = response.result.value {
                            expect(String(data: value, encoding: .utf8)) == "a"
                        }
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN?, Data>") {
                it("works") {
                    self.fetcher(response: "a").request(POST<Int?, Data>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value).toNot(beNil())
                        if let value = response.result.value {
                            expect(String(data: value, encoding: .utf8)) == "a"
                        }
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN], Data>") {
                it("works") {
                    self.fetcher(response: "a").request(POST<[Int], Data>("xyz"), input: [1, 2]) { response in
                        self.assertInput(request: response.request, expected: "[1,2]")
                        expect(response.result.value).toNot(beNil())
                        if let value = response.result.value {
                            expect(String(data: value, encoding: .utf8)) == "a"
                        }
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN]?, Data>") {
                it("works") {
                    self.fetcher(response: "a").request(POST<[Int]?, Data>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value).toNot(beNil())
                        if let value = response.result.value {
                            expect(String(data: value, encoding: .utf8)) == "a"
                        }
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?], Data>") {
                it("works") {
                    self.fetcher(response: "a").request(POST<[Int?], Data>("xyz"), input: [1, nil]) { response in
                        self.assertInput(request: response.request, expected: "[1,null]")
                        expect(response.result.value).toNot(beNil())
                        if let value = response.result.value {
                            expect(String(data: value, encoding: .utf8)) == "a"
                        }
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?]?, Data>") {
                it("works") {
                    self.fetcher(response: "a").request(POST<[Int?]?, Data>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value).toNot(beNil())
                        if let value = response.result.value {
                            expect(String(data: value, encoding: .utf8)) == "a"
                        }
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN], Data>") {
                it("works") {
                    self.fetcher(response: "a").request(POST<[String: Int], Data>("xyz"), input: ["a": 1]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":1}")
                        expect(response.result.value).toNot(beNil())
                        if let value = response.result.value {
                            expect(String(data: value, encoding: .utf8)) == "a"
                        }
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN]?, Data>") {
                it("works") {
                    self.fetcher(response: "a").request(POST<[String: Int]?, Data>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value).toNot(beNil())
                        if let value = response.result.value {
                            expect(String(data: value, encoding: .utf8)) == "a"
                        }
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?], Data>") {
                it("works") {
                    self.fetcher(response: "a").request(POST<[String: Int?], Data>("xyz"), input: ["a": nil]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":null}")
                        expect(response.result.value).toNot(beNil())
                        if let value = response.result.value {
                            expect(String(data: value, encoding: .utf8)) == "a"
                        }
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?]?, Data>") {
                it("works") {
                    self.fetcher(response: "a").request(POST<[String: Int?]?, Data>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value).toNot(beNil())
                        if let value = response.result.value {
                            expect(String(data: value, encoding: .utf8)) == "a"
                        }
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<SupportedType, OUT>") {
                it("works") {
                    self.fetcher(response: "1").request(POST<SupportedType, Int>("xyz"), input: .string("a")) { response in
                        self.assertInput(request: response.request, expected: "\"a\"")
                        expect(response.result.value) == 1
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Void, OUT>") {
                it("works") {
                    self.fetcher(response: "1").request(POST<Void, Int>("xyz")) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == 1
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Data, OUT>") {
                it("works") {
                    self.fetcher(response: "1").request(POST<Data, Int>("xyz"), input: "a".data(using: .utf8)!) { response in
                        self.assertInput(request: response.request, expected: "a")
                        expect(response.result.value) == 1
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN, OUT>") {
                it("works") {
                    self.fetcher(response: "1").request(POST<Int, Int>("xyz"), input: 1) { response in
                        self.assertInput(request: response.request, expected: "1")
                        expect(response.result.value) == 1
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN?, OUT>") {
                it("works") {
                    self.fetcher(response: "1").request(POST<Int?, Int>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == 1
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN], OUT>") {
                it("works") {
                    self.fetcher(response: "1").request(POST<[Int], Int>("xyz"), input: [1, 2]) { response in
                        self.assertInput(request: response.request, expected: "[1,2]")
                        expect(response.result.value) == 1
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN]?, OUT>") {
                it("works") {
                    self.fetcher(response: "1").request(POST<[Int]?, Int>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == 1
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?], OUT>") {
                it("works") {
                    self.fetcher(response: "1").request(POST<[Int?], Int>("xyz"), input: [1, nil]) { response in
                        self.assertInput(request: response.request, expected: "[1,null]")
                        expect(response.result.value) == 1
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?]?, OUT>") {
                it("works") {
                    self.fetcher(response: "1").request(POST<[Int?]?, Int>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == 1
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN], OUT>") {
                it("works") {
                    self.fetcher(response: "1").request(POST<[String: Int], Int>("xyz"), input: ["a": 1]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":1}")
                        expect(response.result.value) == 1
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN]?, OUT>") {
                it("works") {
                    self.fetcher(response: "1").request(POST<[String: Int]?, Int>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == 1
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?], OUT>") {
                it("works") {
                    self.fetcher(response: "1").request(POST<[String: Int?], Int>("xyz"), input: ["a": nil]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":null}")
                        expect(response.result.value) == 1
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?]?, OUT>") {
                it("works") {
                    self.fetcher(response: "1").request(POST<[String: Int?]?, Int>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == 1
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<SupportedType, [OUT]>") {
                it("works") {
                    self.fetcher(response: "[1,2]").request(POST<SupportedType, [Int]>("xyz"), input: .string("a")) { response in
                        self.assertInput(request: response.request, expected: "\"a\"")
                        expect(response.result.value) == [1, 2]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Void, [OUT]>") {
                it("works") {
                    self.fetcher(response: "[1,2]").request(POST<Void, [Int]>("xyz")) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == [1, 2]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Data, [OUT]>") {
                it("works") {
                    self.fetcher(response: "[1,2]").request(POST<Data, [Int]>("xyz"), input: "a".data(using: .utf8)!) { response in
                        self.assertInput(request: response.request, expected: "a")
                        expect(response.result.value) == [1, 2]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN, [OUT]>") {
                it("works") {
                    self.fetcher(response: "[1,2]").request(POST<Int, [Int]>("xyz"), input: 1) { response in
                        self.assertInput(request: response.request, expected: "1")
                        expect(response.result.value) == [1, 2]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN?, [OUT]>") {
                it("works") {
                    self.fetcher(response: "[1,2]").request(POST<Int?, [Int]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == [1, 2]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN], [OUT]>") {
                it("works") {
                    self.fetcher(response: "[1,2]").request(POST<[Int], [Int]>("xyz"), input: [1, 2]) { response in
                        self.assertInput(request: response.request, expected: "[1,2]")
                        expect(response.result.value) == [1, 2]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN]?, [OUT]>") {
                it("works") {
                    self.fetcher(response: "[1,2]").request(POST<[Int]?, [Int]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == [1, 2]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?], [OUT]>") {
                it("works") {
                    self.fetcher(response: "[1,2]").request(POST<[Int?], [Int]>("xyz"), input: [1, nil]) { response in
                        self.assertInput(request: response.request, expected: "[1,null]")
                        expect(response.result.value) == [1, 2]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?]?, [OUT]>") {
                it("works") {
                    self.fetcher(response: "[1,2]").request(POST<[Int?]?, [Int]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == [1, 2]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN], [OUT]>") {
                it("works") {
                    self.fetcher(response: "[1,2]").request(POST<[String: Int], [Int]>("xyz"), input: ["a": 1]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":1}")
                        expect(response.result.value) == [1, 2]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN]?, [OUT]>") {
                it("works") {
                    self.fetcher(response: "[1,2]").request(POST<[String: Int]?, [Int]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == [1, 2]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?], [OUT]>") {
                it("works") {
                    self.fetcher(response: "[1,2]").request(POST<[String: Int?], [Int]>("xyz"), input: ["a": nil]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":null}")
                        expect(response.result.value) == [1, 2]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?]?, [OUT]>") {
                it("works") {
                    self.fetcher(response: "[1,2]").request(POST<[String: Int?]?, [Int]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == [1, 2]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<SupportedType, [OUT?]>") {
                it("works") {
                    self.fetcher(response: "[1,null]").request(POST<SupportedType, [Int?]>("xyz"), input: .string("a")) { response in
                        self.assertInput(request: response.request, expected: "\"a\"")
                        expect("\(response.result.value)") == "Optional([Optional(1), nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Void, [OUT?]>") {
                it("works") {
                    self.fetcher(response: "[1,null]").request(POST<Void, [Int?]>("xyz")) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect("\(response.result.value)") == "Optional([Optional(1), nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Data, [OUT?]>") {
                it("works") {
                    self.fetcher(response: "[1,null]").request(POST<Data, [Int?]>("xyz"), input: "a".data(using: .utf8)!) { response in
                        self.assertInput(request: response.request, expected: "a")
                        expect("\(response.result.value)") == "Optional([Optional(1), nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN, [OUT?]>") {
                it("works") {
                    self.fetcher(response: "[1,null]").request(POST<Int, [Int?]>("xyz"), input: 1) { response in
                        self.assertInput(request: response.request, expected: "1")
                        expect("\(response.result.value)") == "Optional([Optional(1), nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN?, [OUT?]>") {
                it("works") {
                    self.fetcher(response: "[1,null]").request(POST<Int?, [Int?]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect("\(response.result.value)") == "Optional([Optional(1), nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN], [OUT?]>") {
                it("works") {
                    self.fetcher(response: "[1,null]").request(POST<[Int], [Int?]>("xyz"), input: [1, 2]) { response in
                        self.assertInput(request: response.request, expected: "[1,2]")
                        expect("\(response.result.value)") == "Optional([Optional(1), nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN]?, [OUT?]>") {
                it("works") {
                    self.fetcher(response: "[1,null]").request(POST<[Int]?, [Int?]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect("\(response.result.value)") == "Optional([Optional(1), nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?], [OUT?]>") {
                it("works") {
                    self.fetcher(response: "[1,null]").request(POST<[Int?], [Int?]>("xyz"), input: [1, nil]) { response in
                        self.assertInput(request: response.request, expected: "[1,null]")
                        expect("\(response.result.value)") == "Optional([Optional(1), nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?]?, [OUT?]>") {
                it("works") {
                    self.fetcher(response: "[1,null]").request(POST<[Int?]?, [Int?]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect("\(response.result.value)") == "Optional([Optional(1), nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN], [OUT?]>") {
                it("works") {
                    self.fetcher(response: "[1,null]").request(POST<[String: Int], [Int?]>("xyz"), input: ["a": 1]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":1}")
                        expect("\(response.result.value)") == "Optional([Optional(1), nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN]?, [OUT?]>") {
                it("works") {
                    self.fetcher(response: "[1,null]").request(POST<[String: Int]?, [Int?]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect("\(response.result.value)") == "Optional([Optional(1), nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?], [OUT?]>") {
                it("works") {
                    self.fetcher(response: "[1,null]").request(POST<[String: Int?], [Int?]>("xyz"), input: ["a": nil]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":null}")
                        expect("\(response.result.value)") == "Optional([Optional(1), nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?]?, [OUT?]>") {
                it("works") {
                    self.fetcher(response: "[1,null]").request(POST<[String: Int?]?, [Int?]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect("\(response.result.value)") == "Optional([Optional(1), nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<SupportedType, [String: OUT]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":1}").request(POST<SupportedType, [String: Int]>("xyz"), input: .string("a")) { response in
                        self.assertInput(request: response.request, expected: "\"a\"")
                        expect(response.result.value) == ["a": 1]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Void, [String: OUT]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":1}").request(POST<Void, [String: Int]>("xyz")) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == ["a": 1]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Data, [String: OUT]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":1}").request(POST<Data, [String: Int]>("xyz"), input: "a".data(using: .utf8)!) { response in
                        self.assertInput(request: response.request, expected: "a")
                        expect(response.result.value) == ["a": 1]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN, [String: OUT]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":1}").request(POST<Int, [String: Int]>("xyz"), input: 1) { response in
                        self.assertInput(request: response.request, expected: "1")
                        expect(response.result.value) == ["a": 1]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN?, [String: OUT]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":1}").request(POST<Int?, [String: Int]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == ["a": 1]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN], [String: OUT]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":1}").request(POST<[Int], [String: Int]>("xyz"), input: [1, 2]) { response in
                        self.assertInput(request: response.request, expected: "[1,2]")
                        expect(response.result.value) == ["a": 1]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN]?, [String: OUT]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":1}").request(POST<[Int]?, [String: Int]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == ["a": 1]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?], [String: OUT]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":1}").request(POST<[Int?], [String: Int]>("xyz"), input: [1, nil]) { response in
                        self.assertInput(request: response.request, expected: "[1,null]")
                        expect(response.result.value) == ["a": 1]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?]?, [String: OUT]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":1}").request(POST<[Int?]?, [String: Int]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == ["a": 1]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN], [String: OUT]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":1}").request(POST<[String: Int], [String: Int]>("xyz"), input: ["a": 1]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":1}")
                        expect(response.result.value) == ["a": 1]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN]?, [String: OUT]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":1}").request(POST<[String: Int]?, [String: Int]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == ["a": 1]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?], [String: OUT]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":1}").request(POST<[String: Int?], [String: Int]>("xyz"), input: ["a": nil]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":null}")
                        expect(response.result.value) == ["a": 1]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?]?, [String: OUT]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":1}").request(POST<[String: Int?]?, [String: Int]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect(response.result.value) == ["a": 1]
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<SupportedType, [String: OUT?]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":null}").request(POST<SupportedType, [String: Int?]>("xyz"), input: .string("a")) { response in
                        self.assertInput(request: response.request, expected: "\"a\"")
                        expect("\(response.result.value)") == "Optional([\"a\": nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Void, [String: OUT?]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":null}").request(POST<Void, [String: Int?]>("xyz")) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect("\(response.result.value)") == "Optional([\"a\": nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<Data, [String: OUT?]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":null}").request(POST<Data, [String: Int?]>("xyz"), input: "a".data(using: .utf8)!) { response in
                        self.assertInput(request: response.request, expected: "a")
                        expect("\(response.result.value)") == "Optional([\"a\": nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN, [String: OUT?]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":null}").request(POST<Int, [String: Int?]>("xyz"), input: 1) { response in
                        self.assertInput(request: response.request, expected: "1")
                        expect("\(response.result.value)") == "Optional([\"a\": nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<IN?, [String: OUT?]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":null}").request(POST<Int?, [String: Int?]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect("\(response.result.value)") == "Optional([\"a\": nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN], [String: OUT?]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":null}").request(POST<[Int], [String: Int?]>("xyz"), input: [1, 2]) { response in
                        self.assertInput(request: response.request, expected: "[1,2]")
                        expect("\(response.result.value)") == "Optional([\"a\": nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN]?, [String: OUT?]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":null}").request(POST<[Int]?, [String: Int?]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect("\(response.result.value)") == "Optional([\"a\": nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?], [String: OUT?]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":null}").request(POST<[Int?], [String: Int?]>("xyz"), input: [1, nil]) { response in
                        self.assertInput(request: response.request, expected: "[1,null]")
                        expect("\(response.result.value)") == "Optional([\"a\": nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[IN?]?, [String: OUT?]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":null}").request(POST<[Int?]?, [String: Int?]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect("\(response.result.value)") == "Optional([\"a\": nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN], [String: OUT?]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":null}").request(POST<[String: Int], [String: Int?]>("xyz"), input: ["a": 1]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":1}")
                        expect("\(response.result.value)") == "Optional([\"a\": nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN]?, [String: OUT?]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":null}").request(POST<[String: Int]?, [String: Int?]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect("\(response.result.value)") == "Optional([\"a\": nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?], [String: OUT?]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":null}").request(POST<[String: Int?], [String: Int?]>("xyz"), input: ["a": nil]) { response in
                        self.assertInput(request: response.request, expected: "{\"a\":null}")
                        expect("\(response.result.value)") == "Optional([\"a\": nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
            describe("request<[String: IN?]?, [String: OUT?]>") {
                it("works") {
                    self.fetcher(response: "{\"a\":null}").request(POST<[String: Int?]?, [String: Int?]>("xyz"), input: nil) { response in
                        self.assertInput(request: response.request, expected: "")
                        expect("\(response.result.value)") == "Optional([\"a\": nil])"
                        called = true
                    }
                    expect(called).toEventually(beTrue())
                }
            }
        }
    }

    private func assertInput(request: Request, expected: String, file: String = #file, line: UInt = #line) {
        expect(request.httpBody, file: file, line: line).toNot(beNil())
        if let input = request.httpBody, let json = String(data: input, encoding: .utf8) {
            expect(json, file: file, line: line) == expected
        }
    }

    private func fetcher(response: String) -> Fetcher {
        let data = response.data(using: .utf8)!
        let result = FetcherResult.success(data)
        let requestPerformer = TestData.RequestPerformerStub(result: result, data: data)
        return Fetcher(requestPerformer: requestPerformer)
    }
}
