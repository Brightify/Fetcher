// This file is generated by RequestGenerator script.

import DataMapper

// Extension for output type SupportedType.
extension Fetcher {

    @discardableResult
    public func request(_ endpoint: Endpoint<SupportedType, SupportedType>, input: SupportedType, callback: @escaping (Response<SupportedType>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request(_ endpoint: Endpoint<Void, SupportedType>, callback: @escaping (Response<SupportedType>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { .null }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request(_ endpoint: Endpoint<Data, SupportedType>, input: Data, callback: @escaping (Response<SupportedType>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<IN, SupportedType>, input: IN, callback: @escaping (Response<SupportedType>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<IN?, SupportedType>, input: IN?, callback: @escaping (Response<SupportedType>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[IN], SupportedType>, input: [IN], callback: @escaping (Response<SupportedType>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[IN]?, SupportedType>, input: [IN]?, callback: @escaping (Response<SupportedType>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[IN?], SupportedType>, input: [IN?], callback: @escaping (Response<SupportedType>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[IN?]?, SupportedType>, input: [IN?]?, callback: @escaping (Response<SupportedType>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[String: IN], SupportedType>, input: [String: IN], callback: @escaping (Response<SupportedType>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[String: IN]?, SupportedType>, input: [String: IN]?, callback: @escaping (Response<SupportedType>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[String: IN?], SupportedType>, input: [String: IN?], callback: @escaping (Response<SupportedType>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[String: IN?]?, SupportedType>, input: [String: IN?]?, callback: @escaping (Response<SupportedType>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }
}

// Extension for output type Void.
extension Fetcher {

    @discardableResult
    public func request(_ endpoint: Endpoint<SupportedType, Void>, input: SupportedType, callback: @escaping (Response<Void>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { _ in Void() }, callback: callback)
    }

    @discardableResult
    public func request(_ endpoint: Endpoint<Void, Void>, callback: @escaping (Response<Void>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { .null }, outputProvider: { _ in Void() }, callback: callback)
    }

    @discardableResult
    public func request(_ endpoint: Endpoint<Data, Void>, input: Data, callback: @escaping (Response<Void>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { _ in Void() }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<IN, Void>, input: IN, callback: @escaping (Response<Void>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { _ in Void() }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<IN?, Void>, input: IN?, callback: @escaping (Response<Void>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { _ in Void() }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[IN], Void>, input: [IN], callback: @escaping (Response<Void>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { _ in Void() }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[IN]?, Void>, input: [IN]?, callback: @escaping (Response<Void>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { _ in Void() }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[IN?], Void>, input: [IN?], callback: @escaping (Response<Void>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { _ in Void() }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[IN?]?, Void>, input: [IN?]?, callback: @escaping (Response<Void>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { _ in Void() }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[String: IN], Void>, input: [String: IN], callback: @escaping (Response<Void>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { _ in Void() }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[String: IN]?, Void>, input: [String: IN]?, callback: @escaping (Response<Void>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { _ in Void() }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[String: IN?], Void>, input: [String: IN?], callback: @escaping (Response<Void>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { _ in Void() }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[String: IN?]?, Void>, input: [String: IN?]?, callback: @escaping (Response<Void>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { _ in Void() }, callback: callback)
    }
}

// Extension for output type Data.
extension Fetcher {

    @discardableResult
    public func request(_ endpoint: Endpoint<SupportedType, Data>, input: SupportedType, callback: @escaping (Response<Data>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request(_ endpoint: Endpoint<Void, Data>, callback: @escaping (Response<Data>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { .null }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request(_ endpoint: Endpoint<Data, Data>, input: Data, callback: @escaping (Response<Data>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<IN, Data>, input: IN, callback: @escaping (Response<Data>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<IN?, Data>, input: IN?, callback: @escaping (Response<Data>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[IN], Data>, input: [IN], callback: @escaping (Response<Data>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[IN]?, Data>, input: [IN]?, callback: @escaping (Response<Data>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[IN?], Data>, input: [IN?], callback: @escaping (Response<Data>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[IN?]?, Data>, input: [IN?]?, callback: @escaping (Response<Data>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[String: IN], Data>, input: [String: IN], callback: @escaping (Response<Data>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[String: IN]?, Data>, input: [String: IN]?, callback: @escaping (Response<Data>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[String: IN?], Data>, input: [String: IN?], callback: @escaping (Response<Data>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable>(_ endpoint: Endpoint<[String: IN?]?, Data>, input: [String: IN?]?, callback: @escaping (Response<Data>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { $0 }, callback: callback)
    }
}

// Extension for output type OUT.
extension Fetcher {

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<SupportedType, OUT>, input: SupportedType, callback: @escaping (Response<OUT>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Void, OUT>, callback: @escaping (Response<OUT>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { .null }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Data, OUT>, input: Data, callback: @escaping (Response<OUT>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN, OUT>, input: IN, callback: @escaping (Response<OUT>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN?, OUT>, input: IN?, callback: @escaping (Response<OUT>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN], OUT>, input: [IN], callback: @escaping (Response<OUT>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN]?, OUT>, input: [IN]?, callback: @escaping (Response<OUT>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?], OUT>, input: [IN?], callback: @escaping (Response<OUT>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?]?, OUT>, input: [IN?]?, callback: @escaping (Response<OUT>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN], OUT>, input: [String: IN], callback: @escaping (Response<OUT>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN]?, OUT>, input: [String: IN]?, callback: @escaping (Response<OUT>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?], OUT>, input: [String: IN?], callback: @escaping (Response<OUT>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?]?, OUT>, input: [String: IN?]?, callback: @escaping (Response<OUT>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }
}

// Extension for output type OUT?.
extension Fetcher {

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<SupportedType, OUT?>, input: SupportedType, callback: @escaping (Response<OUT?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Void, OUT?>, callback: @escaping (Response<OUT?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { .null }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Data, OUT?>, input: Data, callback: @escaping (Response<OUT?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN, OUT?>, input: IN, callback: @escaping (Response<OUT?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN?, OUT?>, input: IN?, callback: @escaping (Response<OUT?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN], OUT?>, input: [IN], callback: @escaping (Response<OUT?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN]?, OUT?>, input: [IN]?, callback: @escaping (Response<OUT?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?], OUT?>, input: [IN?], callback: @escaping (Response<OUT?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?]?, OUT?>, input: [IN?]?, callback: @escaping (Response<OUT?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN], OUT?>, input: [String: IN], callback: @escaping (Response<OUT?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN]?, OUT?>, input: [String: IN]?, callback: @escaping (Response<OUT?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?], OUT?>, input: [String: IN?], callback: @escaping (Response<OUT?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?]?, OUT?>, input: [String: IN?]?, callback: @escaping (Response<OUT?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }
}

// Extension for output type [OUT].
extension Fetcher {

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<SupportedType, [OUT]>, input: SupportedType, callback: @escaping (Response<[OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Void, [OUT]>, callback: @escaping (Response<[OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { .null }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Data, [OUT]>, input: Data, callback: @escaping (Response<[OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN, [OUT]>, input: IN, callback: @escaping (Response<[OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN?, [OUT]>, input: IN?, callback: @escaping (Response<[OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN], [OUT]>, input: [IN], callback: @escaping (Response<[OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN]?, [OUT]>, input: [IN]?, callback: @escaping (Response<[OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?], [OUT]>, input: [IN?], callback: @escaping (Response<[OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?]?, [OUT]>, input: [IN?]?, callback: @escaping (Response<[OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN], [OUT]>, input: [String: IN], callback: @escaping (Response<[OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN]?, [OUT]>, input: [String: IN]?, callback: @escaping (Response<[OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?], [OUT]>, input: [String: IN?], callback: @escaping (Response<[OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?]?, [OUT]>, input: [String: IN?]?, callback: @escaping (Response<[OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }
}

// Extension for output type [OUT]?.
extension Fetcher {

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<SupportedType, [OUT]?>, input: SupportedType, callback: @escaping (Response<[OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Void, [OUT]?>, callback: @escaping (Response<[OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { .null }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Data, [OUT]?>, input: Data, callback: @escaping (Response<[OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN, [OUT]?>, input: IN, callback: @escaping (Response<[OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN?, [OUT]?>, input: IN?, callback: @escaping (Response<[OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN], [OUT]?>, input: [IN], callback: @escaping (Response<[OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN]?, [OUT]?>, input: [IN]?, callback: @escaping (Response<[OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?], [OUT]?>, input: [IN?], callback: @escaping (Response<[OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?]?, [OUT]?>, input: [IN?]?, callback: @escaping (Response<[OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN], [OUT]?>, input: [String: IN], callback: @escaping (Response<[OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN]?, [OUT]?>, input: [String: IN]?, callback: @escaping (Response<[OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?], [OUT]?>, input: [String: IN?], callback: @escaping (Response<[OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?]?, [OUT]?>, input: [String: IN?]?, callback: @escaping (Response<[OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }
}

// Extension for output type [OUT?].
extension Fetcher {

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<SupportedType, [OUT?]>, input: SupportedType, callback: @escaping (Response<[OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Void, [OUT?]>, callback: @escaping (Response<[OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { .null }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Data, [OUT?]>, input: Data, callback: @escaping (Response<[OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN, [OUT?]>, input: IN, callback: @escaping (Response<[OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN?, [OUT?]>, input: IN?, callback: @escaping (Response<[OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN], [OUT?]>, input: [IN], callback: @escaping (Response<[OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN]?, [OUT?]>, input: [IN]?, callback: @escaping (Response<[OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?], [OUT?]>, input: [IN?], callback: @escaping (Response<[OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?]?, [OUT?]>, input: [IN?]?, callback: @escaping (Response<[OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN], [OUT?]>, input: [String: IN], callback: @escaping (Response<[OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN]?, [OUT?]>, input: [String: IN]?, callback: @escaping (Response<[OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?], [OUT?]>, input: [String: IN?], callback: @escaping (Response<[OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?]?, [OUT?]>, input: [String: IN?]?, callback: @escaping (Response<[OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }
}

// Extension for output type [OUT?]?.
extension Fetcher {

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<SupportedType, [OUT?]?>, input: SupportedType, callback: @escaping (Response<[OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Void, [OUT?]?>, callback: @escaping (Response<[OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { .null }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Data, [OUT?]?>, input: Data, callback: @escaping (Response<[OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN, [OUT?]?>, input: IN, callback: @escaping (Response<[OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN?, [OUT?]?>, input: IN?, callback: @escaping (Response<[OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN], [OUT?]?>, input: [IN], callback: @escaping (Response<[OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN]?, [OUT?]?>, input: [IN]?, callback: @escaping (Response<[OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?], [OUT?]?>, input: [IN?], callback: @escaping (Response<[OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?]?, [OUT?]?>, input: [IN?]?, callback: @escaping (Response<[OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN], [OUT?]?>, input: [String: IN], callback: @escaping (Response<[OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN]?, [OUT?]?>, input: [String: IN]?, callback: @escaping (Response<[OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?], [OUT?]?>, input: [String: IN?], callback: @escaping (Response<[OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?]?, [OUT?]?>, input: [String: IN?]?, callback: @escaping (Response<[OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }
}

// Extension for output type [String: OUT].
extension Fetcher {

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<SupportedType, [String: OUT]>, input: SupportedType, callback: @escaping (Response<[String: OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Void, [String: OUT]>, callback: @escaping (Response<[String: OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { .null }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Data, [String: OUT]>, input: Data, callback: @escaping (Response<[String: OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN, [String: OUT]>, input: IN, callback: @escaping (Response<[String: OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN?, [String: OUT]>, input: IN?, callback: @escaping (Response<[String: OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN], [String: OUT]>, input: [IN], callback: @escaping (Response<[String: OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN]?, [String: OUT]>, input: [IN]?, callback: @escaping (Response<[String: OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?], [String: OUT]>, input: [IN?], callback: @escaping (Response<[String: OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?]?, [String: OUT]>, input: [IN?]?, callback: @escaping (Response<[String: OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN], [String: OUT]>, input: [String: IN], callback: @escaping (Response<[String: OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN]?, [String: OUT]>, input: [String: IN]?, callback: @escaping (Response<[String: OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?], [String: OUT]>, input: [String: IN?], callback: @escaping (Response<[String: OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?]?, [String: OUT]>, input: [String: IN?]?, callback: @escaping (Response<[String: OUT]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }
}

// Extension for output type [String: OUT]?.
extension Fetcher {

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<SupportedType, [String: OUT]?>, input: SupportedType, callback: @escaping (Response<[String: OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Void, [String: OUT]?>, callback: @escaping (Response<[String: OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { .null }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Data, [String: OUT]?>, input: Data, callback: @escaping (Response<[String: OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN, [String: OUT]?>, input: IN, callback: @escaping (Response<[String: OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN?, [String: OUT]?>, input: IN?, callback: @escaping (Response<[String: OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN], [String: OUT]?>, input: [IN], callback: @escaping (Response<[String: OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN]?, [String: OUT]?>, input: [IN]?, callback: @escaping (Response<[String: OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?], [String: OUT]?>, input: [IN?], callback: @escaping (Response<[String: OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?]?, [String: OUT]?>, input: [IN?]?, callback: @escaping (Response<[String: OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN], [String: OUT]?>, input: [String: IN], callback: @escaping (Response<[String: OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN]?, [String: OUT]?>, input: [String: IN]?, callback: @escaping (Response<[String: OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?], [String: OUT]?>, input: [String: IN?], callback: @escaping (Response<[String: OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?]?, [String: OUT]?>, input: [String: IN?]?, callback: @escaping (Response<[String: OUT]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }
}

// Extension for output type [String: OUT?].
extension Fetcher {

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<SupportedType, [String: OUT?]>, input: SupportedType, callback: @escaping (Response<[String: OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Void, [String: OUT?]>, callback: @escaping (Response<[String: OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { .null }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Data, [String: OUT?]>, input: Data, callback: @escaping (Response<[String: OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN, [String: OUT?]>, input: IN, callback: @escaping (Response<[String: OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN?, [String: OUT?]>, input: IN?, callback: @escaping (Response<[String: OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN], [String: OUT?]>, input: [IN], callback: @escaping (Response<[String: OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN]?, [String: OUT?]>, input: [IN]?, callback: @escaping (Response<[String: OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?], [String: OUT?]>, input: [IN?], callback: @escaping (Response<[String: OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?]?, [String: OUT?]>, input: [IN?]?, callback: @escaping (Response<[String: OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN], [String: OUT?]>, input: [String: IN], callback: @escaping (Response<[String: OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN]?, [String: OUT?]>, input: [String: IN]?, callback: @escaping (Response<[String: OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?], [String: OUT?]>, input: [String: IN?], callback: @escaping (Response<[String: OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?]?, [String: OUT?]>, input: [String: IN?]?, callback: @escaping (Response<[String: OUT?]>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }
}

// Extension for output type [String: OUT?]?.
extension Fetcher {

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<SupportedType, [String: OUT?]?>, input: SupportedType, callback: @escaping (Response<[String: OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Void, [String: OUT?]?>, callback: @escaping (Response<[String: OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { .null }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<OUT: Deserializable>(_ endpoint: Endpoint<Data, [String: OUT?]?>, input: Data, callback: @escaping (Response<[String: OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { input }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN, [String: OUT?]?>, input: IN, callback: @escaping (Response<[String: OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<IN?, [String: OUT?]?>, input: IN?, callback: @escaping (Response<[String: OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN], [String: OUT?]?>, input: [IN], callback: @escaping (Response<[String: OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN]?, [String: OUT?]?>, input: [IN]?, callback: @escaping (Response<[String: OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?], [String: OUT?]?>, input: [IN?], callback: @escaping (Response<[String: OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[IN?]?, [String: OUT?]?>, input: [IN?]?, callback: @escaping (Response<[String: OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN], [String: OUT?]?>, input: [String: IN], callback: @escaping (Response<[String: OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN]?, [String: OUT?]?>, input: [String: IN]?, callback: @escaping (Response<[String: OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?], [String: OUT?]?>, input: [String: IN?], callback: @escaping (Response<[String: OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }

    @discardableResult
    public func request<IN: Serializable, OUT: Deserializable>(_ endpoint: Endpoint<[String: IN?]?, [String: OUT?]?>, input: [String: IN?]?, callback: @escaping (Response<[String: OUT?]?>) -> Void) -> Cancellable {
        return run(endpoint: endpoint, inputProvider: { self.objectMapper.serialize(input) }, outputProvider: { self.objectMapper.deserialize($0) }, callback: callback)
    }
}
